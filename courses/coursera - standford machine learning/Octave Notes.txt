---Octave---

--useful commands--
help "comand" //substitsute command with what you want to know more...can be the help itself
, , , //chain commands..., e.g. a=1, b=2, c=3, plot(a,b)
PS1('>> ') //change the the stream name
; //supresses the "print" output (>>)
% //comment
== //equals
~= //different, not
&& //and
|| //or
xor() //xor
pi //PI value
disp() //displays value (prints)
sprintf() //C sprintf...to print use disp(sprintf('a=%f', a))
-vectors and matrixes-
v = [1 2 3] //vector with 1, 2, 3
m = [1 2; 3 4; 5 6] //3x2 matrix
v = 1:0.1:2 //vector with elements starting at 1 to 2 with increments of 0.1
v = 1:10 //vector with integers from 1 to 10
ones(2, 3) //generates matrix 2 x 3 with all values set to 1, useful is to use c = 3 * ones(3,3)
zeros(1,3) //same as ones but with 0
eye(4) //4x4 identity matrix
w = rand(1, 3) //1x3 matrix of random numbers from 0 to 1 with uniform distribution
hist(w) //plots an histogram, of the values of matrix w
hist(w, 50) //histogram with 50 buckets...
size(A) //returns a 1x2 matrix with the size of the A matrix
size(A, 1) //return number of rows, use 2 for columns
length(v) //return the size of the longest dimension of a vector or matrix

--Operate with data--
pwd //shows the current path that octave is in
cd 'C:\....' //change directory
ls //list directory files
load filepath //load the file in filepath
who //shows the variables in memory currently
whos //shows variables and more stuff
clear var //deletes the "var" variable
v = priceY(1:10) //creates "v" a vector with the first 10 values of priceY
save hello.mat v //saves 'v' in the hello.mat file
save hello.text v -ascii //saves as ascii for people to read
clear //deletes all variables in the workspace
A(3, 2) //returns the value of the element in the 3 row and 2 column of A
A(2,:) //':' return everything, in this case, everything from row 2
A(:,2) //'return everything from column 2
A([1 3], :)  //return all the values from row 1 and row 3
A = [A, [100; 101; 102]] //apened column vector at the right of A matrix
A(:) //put all elements of A in a single column vector
C = [A B] or [A, B]//C matrix has matrix A and appends B to its rows
C = [A; B] //C matrix has matrix A and appends B to its columns

--Computing Data--
A * B //matrix mulitplication
A .* B //element by element multiplication, a0 * b0 , etc
A .^ 2  //element wise squaring..
1 ./ A //element wise inverse
log(v) //element wise log of elements of v
exp(v) //element wise exponsnt
abs(v) //element wise absulote/module
-v //element wise negative
v + 1 //add 1 element wise
A' //transpose of A
max(A) //returns max value of A, column wise
[val, ind] = max(A) //returns val as the max and ind as the index of that max in the A matrix
A < 3 //return matrix of the element wise conditions (0/false and 1/true)
find(a < 3) //return which elements are true
[r, c] = find(A >= 7) //returns the row 'r' and column'c' for the true values
sum(a) //returns the sum of all elements, column wise
prod(a) //returns the product of a
floor(a) //rounds down all elements
ceil(a)
max(A, [ ], 1) //max per column
max(A, [ ], 2) //max per row
max(A, B) //return matrix with max between each value at the same index in the matrixes
max(max(A)) //absolute max of A, because max by default is max column wise, 
max(A(:)) //same, because turns A into a vector....
sum(A, 1) //sum by column
sum(A, 2) //sum by row
sum(sum(A)) //return the sum of all elements
pinv(A) //returns the inverse matrix of A (pseudo-inverse)
flipup(eye(3)) //flips up side down the matrix...

--Plotting Data--
plot(t, y1) //plots t on x and y1 on y
hold on; //use before plotting a graph on top of another
plot(y, y2, 'r2') //to plot on top
xlabel('time') //add labels, ylabel works too
legend('grph') //add legend to function in graph
title('title') //add title to graph
print -dpng 'myPlot.png' //save the graph in a png file
close //closes the figure/plot
figure(1); plot(t,y1); //assing a figure to a plot
subplot(1, 2, 1); //devies the plot in 1 x 2 grid and access the first element...enables multiple plots in one figure
axis([0.5 1 -1 1]) //sets the range of the axis
imagesc(A) //plot a matrix with colors... colorbar also useful and colormap gray too
imagesc(A), colorbar, colormap gray //usefull to visualize the matrix elements

--Control Statements--
for i=1:10,
	v(i) = 2^i;
end; //loop a vector or matrix, "break" and "continue" statments also work

i = 1;
while i <= 5,
	if v(i) == 999;
		break;
	end; 

	v(i) = 500;
	i = i+1;

end; //while loop with if statement

if v(1) == 1,
	disp('The value is one');
elseif v(1) == 2,
	...
else
	...
end; //if statements

--Functions--
create a file with extention .m
function returnvalue = functionname(arg)
returnvalue = arg*2;

returnvalue can be a vector, and have multiple values e.g. [y1, y2] .... [a, b] = functionname(2)

functionname(2) //call the function. current path must be the same as the .m file, or add that path to the seartch path by % Octave search path (Advanced/Optional) addpath('path')
addpath('C:\Users\Diogo\Octive') // add this seatch path for octive..useful for loading function files

--Vectorization--
makes the octave programs run much faster, by using standart library functions

sum of tetha * x (using a for loop) is the same as the inner product of thetha'(transposed) * x -> this is much faster!!

--Normal Equation--
tetha = pinv(X'*X)*X'*y

what if X'*X is singular/non-invertible?
by using pinv instead of inv, you get the pseudo inverted that makes it possible to calculate an approx inverted of a singular/non-inverted matrixes

this can happen when
	exists redudant features (linearly dependent)
	too many features (m < n)
solution
	delete redundant features or have more training examples

--Submiting Assignements--
